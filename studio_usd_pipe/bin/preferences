#!/usr/bin/python

import json
import optparse

from studio_usd_pipe.core import preferences


def pipe():
    pref = preferences.Preferences()
    parser = optparse.OptionParser(
        usage='usage: %prog [options] create studio usd pipe preferences',
        version=pref.config.version)   
    
    parser.add_option(
        '-q', '--query',
        action='store_true',
        dest='query',
        default=False,
        help='to query'
        )

    parser.add_option(
        '-c', '--create',
        action='store_true',
        dest='create',
        default=False,
        help='to create preferences'
        )

    parser.add_option(
        '-a', '--all',
        action='store_true',
        dest='pAll',
        default=False,
        help='to query all directory'
        )    
    
    parser.add_option(
        '-s', '--show',
        action='store',
        dest='pShow',
        default=False,
        help='show directory'
        ) 
       
    parser.add_option(
        '-i', '--showicon',
        action='store',
        dest='pIcon',
        default=False,
        help='show icon directory'
        ) 
        
    parser.add_option(
        '-d', '--database',
        action='store',
        dest='pDataBase',
        default=False,
        help='database directory'
        )  
    
    parser.add_option(
        '-p', '--mayapy',
        action='store',
        dest='pMayapy',
        default=False,
        help='mayapy directory'
        )  
    
    parser.add_option(
        '-e', '--example',
        action='store_true',
        dest='example',
        default=False,
        help='example of preferences'
        )  
        
    (options, args) = parser.parse_args()

    if options.query:
        print 'release\t', pref.config.name, '\t', pref.config.version   
        data = pref.get()
        if options.pAll:
            print json.dumps(data, indent=4)
        if options.pShow and options.pShow == 'True':
            print data['show_directory']
        if options.pIcon and options.pIcon == 'True':
            print data['show_icon'] 
        if options.pDataBase and options.pDataBase == 'True':
            print data['database_directory'] 
        if options.pMayapy and options.pMayapy == 'True':
            print data['mayapy_directory'] 
        
    elif options.create:
        print 'release\t', pref.config.name, '\t', pref.config.version   
        if not options.pShow:
            raise ValueError('-s -show option requires an argument')
        if not options.pIcon:
            raise ValueError('-i --showicon option requires an argument')
        if not options.pDataBase:
            raise ValueError('-d -database option requires an argument')
        if not options.pMayapy:
            raise ValueError('-p --mayapy option requires an argument')
                
        inputs = {
            'show_directory': options.pShow,
            'show_icon': options.pIcon,
            'database_directory': options.pDataBase,
            'mayapy_directory': options.pMayapy
            }
        
        pref = preferences.Preferences()
        pref.create(
            show_directory=options.pShow,
            show_icon=options.pIcon,
            database_directory=options.pDataBase,
            mayapy_directory=options.pMayapy            
            )
        
    elif options.example:
        print 'release\t', pref.config.name, '\t', pref.config.version   
        flags = [
            '-c',
            '-s /venture/shows/my_hero',
            '-i local/references/images/batman.png',
            '-d /venture/shows/my_hero/db',
            '-p /usr/autodesk/maya2018/bin/mayapy'
        ]
        print 'create preferences\t- preferences {}'.format(' '.join(flags))
        print 'get all data \t\t- preferences -q -a'
        print 'get all show \t\t- preferences -q -s True'
        print 'get all show icon \t- preferences -q -i True'
        print 'get all database data \t- preferences -q -d True'
        print 'get all mayapy \t\t- preferences -q -p True'
    
    else:
        from studio_usd_pipe.gui import preferences as pref
        pref.show_window(standalone=True)

if __name__ == '__main__':
    pipe()
